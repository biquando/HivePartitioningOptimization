[
    "SELECT order_date, COUNT(*) as num_orders, SUM(total_amount) as daily_revenue FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31' GROUP BY order_date",
    
    "SELECT DAYOFWEEK(order_date) as day_of_week, AVG(total_amount) as avg_order_value FROM orders WHERE order_date >= '2024-01-01' AND order_date < '2024-02-01' GROUP BY DAYOFWEEK(order_date)",
    
    "SELECT o.order_date, COUNT(DISTINCT o.user_id) as unique_customers FROM orders o WHERE o.order_date = '2024-02-23' GROUP BY o.order_date",
    
    "SELECT user_id, COUNT(*) as order_count FROM orders WHERE order_date >= DATE_SUB('2024-02-23', 30) AND order_date <= '2024-02-23' GROUP BY user_id HAVING COUNT(*) > 1",
    
    "SELECT DATE_FORMAT(order_date, 'yyyy-MM') as order_month, SUM(total_amount) as monthly_revenue FROM orders WHERE order_date >= '2023-01-01' AND order_date < '2024-01-01' GROUP BY DATE_FORMAT(order_date, 'yyyy-MM')",
    
    "SELECT a.order_date, a.total_amount, b.prev_day_avg FROM orders a LEFT JOIN (SELECT order_date, AVG(total_amount) as prev_day_avg FROM orders GROUP BY order_date) b ON a.order_date = DATE_ADD(b.order_date, 1) WHERE a.order_date = '2024-02-23'",
    
    "SELECT order_date, user_id, total_amount, DENSE_RANK() OVER (PARTITION BY order_date ORDER BY total_amount DESC) as daily_rank FROM orders WHERE order_date BETWEEN '2024-02-01' AND '2024-02-28'",
    
    "SELECT DATE_FORMAT(order_date, 'yyyy-MM') as order_month, COUNT(DISTINCT user_id) as monthly_active_users FROM orders WHERE order_date >= '2024-01-01' AND order_date < '2024-03-01' GROUP BY DATE_FORMAT(order_date, 'yyyy-MM')",
    
    "SELECT DATE_FORMAT(order_date, 'yyyy-MM-dd') as week_start, COUNT(*) as orders_per_week, SUM(total_amount) as weekly_revenue FROM orders WHERE order_date >= '2024-01-01' AND order_date < '2024-03-01' GROUP BY DATE_FORMAT(order_date, 'yyyy-MM-dd')",
    
    "WITH daily_stats AS (SELECT order_date, COUNT(*) as order_count, AVG(total_amount) as avg_amount FROM orders WHERE order_date >= '2024-02-01' AND order_date <= '2024-02-28' GROUP BY order_date) SELECT order_date, order_count, avg_amount, AVG(avg_amount) OVER (ORDER BY order_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as moving_avg_7day FROM daily_stats",
    
    "SELECT order_date, MIN(total_amount) as min_order, MAX(total_amount) as max_order, AVG(total_amount) as avg_order FROM orders WHERE order_date BETWEEN '2024-02-15' AND '2024-02-23' GROUP BY order_date",
    
    "SELECT user_id, order_date, total_amount, LAG(order_date) OVER (PARTITION BY user_id ORDER BY order_date) as previous_order_date FROM orders WHERE order_date >= '2024-02-01' AND order_date < '2024-03-01'",
    
    "SELECT order_date, total_amount, NTILE(4) OVER (PARTITION BY order_date ORDER BY total_amount) as daily_quartile FROM orders WHERE order_date = '2024-02-23'",
    
    "SELECT DATE_FORMAT(a.order_date, 'yyyy-MM-dd') as order_day, COUNT(*) as order_count, SUM(CASE WHEN b.prev_date = a.order_date THEN b.prev_count ELSE 0 END) as prev_day_orders FROM orders a LEFT JOIN (SELECT DATE_ADD(order_date, 1) as prev_date, COUNT(*) as prev_count FROM orders GROUP BY order_date) b ON a.order_date = b.prev_date WHERE a.order_date >= '2024-02-01' AND a.order_date <= '2024-02-28' GROUP BY DATE_FORMAT(a.order_date, 'yyyy-MM-dd'), a.order_date",
    
    "SELECT hour_bucket, AVG(order_count) as avg_orders FROM (SELECT DATE_FORMAT(order_date, 'HH') as hour_bucket, COUNT(*) as order_count FROM orders WHERE order_date >= '2024-02-20' AND order_date < '2024-02-24' GROUP BY DATE_FORMAT(order_date, 'HH')) t GROUP BY hour_bucket",
    
    "SELECT user_segments.segment, COUNT(DISTINCT o.user_id) as user_count FROM (SELECT user_id, CASE WHEN COUNT(*) > 10 THEN 'high' WHEN COUNT(*) > 5 THEN 'medium' ELSE 'low' END as segment FROM orders WHERE order_date >= '2024-01-01' AND order_date < '2024-03-01' GROUP BY user_id) user_segments JOIN orders o ON o.user_id = user_segments.user_id WHERE o.order_date = '2024-02-23' GROUP BY user_segments.segment",
    
    "SELECT order_date, user_id, total_amount, SUM(total_amount) OVER (PARTITION BY order_date ORDER BY total_amount ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as cumulative_daily_total FROM orders WHERE order_date BETWEEN '2024-02-22' AND '2024-02-23'",
    
    "SELECT DATE_FORMAT(order_date, 'EEEE') as day_name, AVG(daily_orders) as avg_orders_by_weekday FROM (SELECT order_date, COUNT(*) as daily_orders FROM orders WHERE order_date >= '2024-01-01' AND order_date < '2024-03-01' GROUP BY order_date) daily GROUP BY DATE_FORMAT(order_date, 'EEEE')",
    
    "SELECT a.order_date, COUNT(*) as total_orders, COUNT(b.user_id) as repeat_customers FROM orders a LEFT JOIN (SELECT DISTINCT user_id FROM orders WHERE order_date < '2024-02-23') b ON a.user_id = b.user_id WHERE a.order_date = '2024-02-23' GROUP BY a.order_date",
    
    "WITH order_ranks AS (SELECT order_date, user_id, total_amount, RANK() OVER (PARTITION BY order_date ORDER BY total_amount DESC) as daily_rank FROM orders WHERE order_date >= '2024-02-01' AND order_date <= '2024-02-28') SELECT order_date, user_id, total_amount FROM order_ranks WHERE daily_rank <= 3"
]