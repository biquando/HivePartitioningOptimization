[
    "SELECT * FROM products WHERE category = 'Electronics' AND price < 500.00",
    "SELECT COUNT(*) FROM products WHERE category = 'Books' AND price > 20.00",
    "SELECT product_id, name FROM products WHERE category = 'Clothing' AND price BETWEEN 50.00 AND 100.00",
    "SELECT DISTINCT category FROM products WHERE price > 1000.00",
    "SELECT AVG(price) FROM products WHERE category = 'Home & Kitchen'",
    "SELECT category, COUNT(*) FROM products WHERE price < 25.00 GROUP BY category",
    "SELECT name, stock FROM products WHERE category = 'Sports' AND price >= 75.00",
    "SELECT product_id FROM products WHERE category = 'Beauty' AND price <= 30.00 AND stock > 0",
    "SELECT category, MAX(price) FROM products GROUP BY category",
    "WITH price_stats AS (SELECT MIN(price) as min_price, MAX(price) as max_price FROM products WHERE category = 'Electronics') SELECT product_id, name, price, (price - min_price)/(max_price - min_price) as price_percentile FROM products, price_stats WHERE category = 'Electronics'",
    "SELECT category, name, price, stock, NTILE(4) OVER (PARTITION BY category ORDER BY price) as price_quartile FROM products WHERE category IN ('Electronics', 'Books', 'Furniture')",
    "WITH category_stats AS (SELECT AVG(price) as avg_price, STDDEV(price) as price_std FROM products WHERE category = 'Electronics') SELECT p.product_id, p.name, p.price, (p.price - cs.avg_price)/cs.price_std as z_score FROM products p, category_stats cs WHERE p.category = 'Electronics'",
    "SELECT category, price, stock, LAG(stock, 1) OVER (PARTITION BY category ORDER BY price) as prev_price_stock, LEAD(stock, 1) OVER (PARTITION BY category ORDER BY price) as next_price_stock FROM products WHERE category = 'Electronics'",
    "SELECT category, name, price, stock, SUM(stock) OVER (PARTITION BY category ORDER BY price ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as rolling_stock_3day FROM products WHERE category = 'Furniture'",
    "WITH ranked_products AS (SELECT *, DENSE_RANK() OVER (PARTITION BY category ORDER BY price DESC) as price_rank FROM products WHERE category = 'Electronics') SELECT * FROM ranked_products WHERE price_rank <= 5",
    "SELECT category, name, price, stock, AVG(price) OVER (PARTITION BY category ORDER BY stock ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as cumulative_avg_price FROM products WHERE category IN ('Electronics', 'Books')",
    "WITH stock_quartiles AS (SELECT category, PERCENTILE(CAST(stock AS BIGINT), ARRAY(0.25, 0.5, 0.75)) as quartiles FROM products WHERE category = 'Electronics' GROUP BY category) SELECT p.*, CASE WHEN p.stock <= q.quartiles[0] THEN 'Low' WHEN p.stock <= q.quartiles[1] THEN 'Medium' WHEN p.stock <= q.quartiles[2] THEN 'High' ELSE 'Very High' END as stock_level FROM products p JOIN stock_quartiles q ON p.category = q.category WHERE p.category = 'Electronics'",
    "SELECT p1.category, p1.name as product1, p2.name as product2, ABS(p1.price - p2.price) as price_diff FROM products p1 JOIN products p2 ON p1.category = p2.category AND p1.product_id < p2.product_id WHERE p1.category = 'Electronics' AND ABS(p1.price - p2.price) < 10.00",
    "WITH price_bands AS (SELECT category, MIN(price) as min_price, MAX(price) as max_price, (MAX(price) - MIN(price))/5 as band_size FROM products WHERE category = 'Electronics' GROUP BY category) SELECT p.*, FLOOR((p.price - pb.min_price)/pb.band_size) + 1 as price_band FROM products p JOIN price_bands pb ON p.category = pb.category WHERE p.category = 'Electronics'"
]